â­• Model.View.Controller

ğŸ”µ Model - Les archives (JournalEntry)
    ğŸ”¹ structure les donnÃ©es avec un consstructeur, des getters et des setters.
    ğŸ”¹ @Entity indique que cela doit Ãªtre transformÃ© en table dans la base de donnÃ©es.
    ğŸ”¹ ce qu'on appelle l'ORM (Object-Relational Mapping) qui fait le pont entre le monde orientÃ© objet de Java et le monde relationnel des bases de donnÃ©es.

ğŸ”µ Controller - Le Receptionniste (JournalEntryController)
    ğŸ”¹ ReÃ§oit les requÃªtes HTTP (GET/POST/DELETE...) et dÃ©cide quoi en faire.
    ğŸ”¹ @RestController indique que cette classe gÃ¨re les requÃªtes web et renvoie des donnÃ©es au format JSON.*

ğŸ”µ Service - Le SpÃ©cialiste (JournalEntryService)
    ğŸ”¹ Contient la logique mÃ©tier de l'application.
    ğŸ”¹ Connait toues les rÃªgles et les procÃ©dures. (vÃ©rifie qu'une entrÃ©e de journal n'est pas vide avant de la sauvegarder)

ğŸ”µ Repository - L'Archiviste (JournalEntryRepository)
     ğŸ”¹ Interface qui hÃ©rite de JPARepository.
     ğŸ”¹ Permet d'intÃ©ragir avec la base de donnÃ©es sans Ã©crire de SQL pour ranger les donnÃ©es.

â­• Programmation.OrientÃ©.Objet

ğŸ”µ Encapsulation - ProtÃ©ger les donnÃ©es
    ğŸ”¹ Mettre les propriÃ©tÃ©s en private
    ğŸ”¹ CrÃ©er des getters et des setters pour accÃ©der aux donnÃ©es privÃ©es.

ğŸ”µ Relations entre Classes (cardinalitÃ© de tables)
    ğŸ”¹ @ManytoOne indique la relation entre Journal et User (un User peut avoir plusieurs objets Journal)

ğŸ”µ HÃ©ritage
    ğŸ”¹ les repositories hÃ©ritent de JpaRepository, obtenant des Ã©thodes de manipulation de donnÃ©es (????)

â­• Concepts Spring Boot

ğŸ”µ Injection de DÃ©pendances
    ğŸ”¹ @RequiredArgsConstructoor dans le Service et le Controller.
    ğŸ”¹ GÃ¨re automatiquement les dÃ©pendances entres composants. (????)

ğŸ”µ REST API
    ğŸ”¹ Le controller dÃ©finit une API REST avec des endpoints
    @PostMapping // CrÃ©e une nouvelle entrÃ©e
    @GetMapping("/{id}") // RÃ©cupÃ¨re une entrÃ©e
    @DeleteMapping("/{id}") // Supprime une entrÃ©e

ğŸ”µ Gestion des entitÃ©s
    ğŸ”¹ Spring Data JPA simplifie la persistance des donnÃ©es.
    ğŸ”¹ journalEntryRepository.save(entry) sauvegarde automatiquement une entrÃ©e en base de donnÃ©es.

